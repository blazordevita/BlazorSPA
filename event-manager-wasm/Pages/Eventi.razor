@inject HttpClient Http;
@page "/eventi"

@if(EventoCorrente == null)
{
    <ListaEventi 
        ListaElementi="ListaEventi" OnElimina="EliminaEvento"
        OnCrea="CreaEvento" OnModifica="ModificaEvento" />
}
else
{
    <DettaglioEvento 
        DettaglioElemento="EventoCorrente"
        OnSalva="SalvaEvento" OnAnnulla="AnnullaOperazione" />
}

@code {

    private string apiUrl = @"http://localhost:5002/api/eventi";
    public Evento EventoCorrente { get; set; }
    List<ElementoListaEventi> ListaEventi { get; set; } 
        = new List<ElementoListaEventi>();
    
    protected override Task OnInitializedAsync()
    {
        return caricaEventi();
    }

    private async Task caricaEventi()
    {
        ListaEventi = await Http
            .GetJsonAsync<List<ElementoListaEventi>>(apiUrl);
    }

    public void CreaEvento()
    {
        this.EventoCorrente = new Evento();
    }

    public async Task ModificaEvento(ElementoListaEventi evento)
    {
        this.EventoCorrente = await Http
            .GetJsonAsync<Evento>($"{apiUrl}/{evento.Id}");
    }

    public async Task SalvaEvento(Evento evento)
    {
        if(evento.Id == 0)
        {
            await Http.PostJsonAsync<Evento>(apiUrl, evento);
        }
        else
        {
            await Http.PutJsonAsync($"{apiUrl}/{evento.Id}", evento);
        }
        await caricaEventi();
        this.EventoCorrente = null;
    }

    public void AnnullaOperazione()
    {
        this.EventoCorrente = null;
    }

    public async Task EliminaEvento(ElementoListaEventi evento) 
    {
        await Http.DeleteAsync($"{apiUrl}/{evento.Id}");
        await caricaEventi();
    }
}
